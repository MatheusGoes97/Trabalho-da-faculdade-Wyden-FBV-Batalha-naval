#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

// Constantes do jogo
#define TAMANHO 10
#define TAMANHO_NAVIO 3
#define AGUA 0
#define NAVIO 3
#define HABILIDADE 5
#define TAMANHO_HABILIDADE 5  // Tamanho das matrizes de habilidade (5x5)

// Tipos de orientação para os navios
typedef enum {
    HORIZONTAL,
    VERTICAL,
    DIAGONAL_PRINCIPAL,
    DIAGONAL_SECUNDARIA
} Orientacao;

// Tipos de habilidades
typedef enum {
    CONE,
    CRUZ,
    OCTAEDRO
} TipoHabilidade;

// Função para inicializar o tabuleiro com água
void inicializarTabuleiro(int tabuleiro[TAMANHO][TAMANHO]) {
    for (int i = 0; i < TAMANHO; i++) {
        for (int j = 0; j < TAMANHO; j++) {
            tabuleiro[i][j] = AGUA;
        }
    }
}

// Função para verificar se a posição do navio é válida
bool posicaoValida(int linha, int coluna, int tamanho, Orientacao orientacao, int tabuleiro[TAMANHO][TAMANHO]) {
    // Verifica se está dentro dos limites do tabuleiro
    switch (orientacao) {
        case HORIZONTAL:
            if (coluna + tamanho - 1 >= TAMANHO) return false;
            break;
        case VERTICAL:
            if (linha + tamanho - 1 >= TAMANHO) return false;
            break;
        case DIAGONAL_PRINCIPAL:
            if (linha + tamanho - 1 >= TAMANHO || coluna + tamanho - 1 >= TAMANHO) return false;
            break;
        case DIAGONAL_SECUNDARIA:
            if (linha + tamanho - 1 >= TAMANHO || coluna - (tamanho - 1) < 0) return false;
            break;
    }
    
    // Verifica se não há sobreposição com outros navios
    for (int i = 0; i < tamanho; i++) {
        int x = linha, y = coluna;
        
        switch (orientacao) {
            case HORIZONTAL:
                y += i;
                break;
            case VERTICAL:
                x += i;
                break;
            case DIAGONAL_PRINCIPAL:
                x += i;
                y += i;
                break;
            case DIAGONAL_SECUNDARIA:
                x += i;
                y -= i;
                break;
        }
        
        if (tabuleiro[x][y] != AGUA) return false;
    }
    
    return true;
}

// Função para posicionar um navio no tabuleiro
void posicionarNavio(int tabuleiro[TAMANHO][TAMANHO], int linha, int coluna, int tamanho, Orientacao orientacao) {
    for (int i = 0; i < tamanho; i++) {
        int x = linha, y = coluna;
        
        switch (orientacao) {
            case HORIZONTAL:
                y += i;
                break;
            case VERTICAL:
                x += i;
                break;
            case DIAGONAL_PRINCIPAL:
                x += i;
                y += i;
                break;
            case DIAGONAL_SECUNDARIA:
                x += i;
                y -= i;
                break;
        }
        
        tabuleiro[x][y] = NAVIO;
    }
}

// Função para criar a matriz de uma habilidade
void criarHabilidade(int habilidade[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE], TipoHabilidade tipo) {
    // Inicializa toda a matriz com 0
    for (int i = 0; i < TAMANHO_HABILIDADE; i++) {
        for (int j = 0; j < TAMANHO_HABILIDADE; j++) {
            habilidade[i][j] = 0;
        }
    }
    
    int centro = TAMANHO_HABILIDADE / 2;
    
    switch (tipo) {
        case CONE:
            // Cria um padrão de cone apontando para baixo
            for (int i = 0; i < TAMANHO_HABILIDADE; i++) {
                int largura = i + 1;
                int inicio = centro - i/2;
                for (int j = inicio; j < inicio + largura && j < TAMANHO_HABILIDADE; j++) {
                    if (j >= 0) {
                        habilidade[i][j] = 1;
                    }
                }
            }
            break;
            
        case CRUZ:
            // Cria um padrão de cruz
            for (int i = 0; i < TAMANHO_HABILIDADE; i++) {
                habilidade[centro][i] = 1;  // Linha horizontal
                habilidade[i][centro] = 1;  // Linha vertical
            }
            break;
            
        case OCTAEDRO:
            // Cria um padrão de octaedro (losango)
            for (int i = 0; i < TAMANHO_HABILIDADE; i++) {
                int distancia = abs(i - centro);
                for (int j = centro - distancia; j <= centro + distancia; j++) {
                    if (j >= 0 && j < TAMANHO_HABILIDADE) {
                        habilidade[i][j] = 1;
                    }
                }
            }
            break;
    }
}

// Função para aplicar uma habilidade ao tabuleiro
void aplicarHabilidade(int tabuleiro[TAMANHO][TAMANHO], int habilidade[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE], int linha, int coluna) {
    int offset = TAMANHO_HABILIDADE / 2;
    
    for (int i = 0; i < TAMANHO_HABILIDADE; i++) {
        for (int j = 0; j < TAMANHO_HABILIDADE; j++) {
            int x = linha - offset + i;
            int y = coluna - offset + j;
            
            // Verifica se está dentro dos limites do tabuleiro
            if (x >= 0 && x < TAMANHO && y >= 0 && y < TAMANHO) {
                // Se a posição na matriz de habilidade for 1, marca no tabuleiro
                if (habilidade[i][j] == 1) {
                    // Não sobrescreve os navios (valor 3)
                    if (tabuleiro[x][y] == AGUA) {
                        tabuleiro[x][y] = HABILIDADE;
                    }
                }
            }
        }
    }
}

// Função para exibir o tabuleiro
void exibirTabuleiro(int tabuleiro[TAMANHO][TAMANHO]) {
    printf("\nTabuleiro de Batalha Naval com Habilidades:\n");
    printf("   ");
    for (int j = 0; j < TAMANHO; j++) {
        printf("%2d ", j); // Cabeçalho das colunas
    }
    printf("\n");
    
    for (int i = 0; i < TAMANHO; i++) {
        printf("%2d ", i); // Número da linha
        for (int j = 0; j < TAMANHO; j++) {
            printf("%2d ", tabuleiro[i][j]);
        }
        printf("\n");
    }
    printf("\nLegenda:\n");
    printf("0 - Agua\n");
    printf("3 - Navio\n");
    printf("5 - Area afetada por habilidade\n\n");
}

int main() {
    int tabuleiro[TAMANHO][TAMANHO];
    
    // Inicializa o tabuleiro com água
    inicializarTabuleiro(tabuleiro);
    
    // Posiciona os navios (coordenadas definidas no código)
    
    // 1. Navio horizontal
    posicionarNavio(tabuleiro, 2, 3, TAMANHO_NAVIO, HORIZONTAL);
    
    // 2. Navio vertical
    posicionarNavio(tabuleiro, 5, 7, TAMANHO_NAVIO, VERTICAL);
    
    // 3. Navio na diagonal principal
    posicionarNavio(tabuleiro, 1, 1, TAMANHO_NAVIO, DIAGONAL_PRINCIPAL);
    
    // 4. Navio na diagonal secundária
    posicionarNavio(tabuleiro, 2, 7, TAMANHO_NAVIO, DIAGONAL_SECUNDARIA);
    
    // Cria e aplica as habilidades
    
    // Habilidade Cone (5x5)
    int cone[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE];
    criarHabilidade(cone, CONE);
    aplicarHabilidade(tabuleiro, cone, 4, 4);  // Centro em (4,4)
    
    // Habilidade Cruz (5x5)
    int cruz[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE];
    criarHabilidade(cruz, CRUZ);
    aplicarHabilidade(tabuleiro, cruz, 7, 2);  // Centro em (7,2)
    
    // Habilidade Octaedro (5x5)
    int octaedro[TAMANHO_HABILIDADE][TAMANHO_HABILIDADE];
    criarHabilidade(octaedro, OCTAEDRO);
    aplicarHabilidade(tabuleiro, octaedro, 3, 6);  // Centro em (3,6)
    
    // Exibe o tabuleiro
    exibirTabuleiro(tabuleiro);
    
    return 0;
